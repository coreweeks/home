[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	editor = vim
	excludesfile = ~/.gitignore_global
[color]
	ui = true
[alias]
  # inspired by <https://www.atlassian.com/blog/git/advanced-git-aliases>
#  bclean = "!git branch --merged HEAD | sed -re 's;^\\*?\\s+;;' | egrep -v \"^($(git rev-parse --abbrev-ref HEAD)|master)$\" -Z | xargs -0 -I{} echo -e 'these branches would be cleared:\n{}'"
  bclean = "!bash -c 'affected_branches=$(git branch --merged HEAD | \
               sed -re \"s;^\\*?\\s+;;\" | \
               egrep -v \"^($(git rev-parse --abbrev-ref HEAD)|master)$\" -Z);\
               if [[ $affected_branches ]]; then\
                  echo -e \"these branches would be cleared:\\n$affected_branches\";\
                  \
                  echo -n \"would you like to clear them? [y/N] \";\
                  read;\
                  echo;\
                  [[ $REPLY =~ [Yy] ]] && {\
                     for branch in $affected_branches; do\
                        git branch -d $branch;\
                     done; \
                  };\
               else\
                  echo \"no branches to clean!\";\
               fi;\
            '"

  co = checkout
  ci = "!bash -c '\
           $HOME/.gitconfig.d/git-sync.sh;\
           \
           echo -e \"\npress ENTER to continue with commit\";\
           read;\
           git commit -v '$@'\
        '"
  br = branch
  df = diff --word-diff=color
  dfs = diff --word-diff=color --staged
  diffs = diff --staged
  dump = cat-file -p
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  st = status
  sync = "!$HOME/.gitconfig.d/git-sync.sh $@"
  type = cat-file -t
  ver = "!bash -c 'version=$0; git tag -am \"version $version\" v$version'"
  who = shortlog -n -s --no-merges # from <https://thoughtbot.com/blog/streamline-your-git-workflow-with-aliases>

  # push current branch to all remotes
  # from <https://stackoverflow.com/questions/5785549/able-to-push-to-all-git-remotes-with-the-one-command/18674313#18674313>
  # and <https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git/6245587#6245587>
   pushall = "!bash -c '\
      branch=$(git symbolic-ref --short HEAD);\
      [[ \"$branch\" =~ master ]] &&\
         echo -n \"are you sure you wish to push \"$branch\" to all remotes? [y/N] \" &&\
         read;\
      [[ $REPLY =~ [Yy] || ! \"$branch\" =~ master ]] &&\
         git remote | xargs -L1 -I{} git push -v --tags {} $(git rev-parse --abbrev-ref HEAD)'"
   pushallf = "!bash -c '\
      branch=$(git symbolic-ref --short HEAD);\
      [[ \"$branch\" =~ master ]] &&\
         echo -n \"are you sure you wish to push \"$branch\" to all remotes? [y/N] \" &&\
         read;\
      [[ $REPLY =~ [Yy] || ! \"$branch\" =~ master ]] &&\
         git remote | xargs -L1 -I{} git push -v --tags {} $(git rev-parse --abbrev-ref HEAD)'$@"

  fet = "fetch --all -p"

  changelog = "!git log --format='### %cd%x02%n%B' master..$(git rev-parse --abbrev-ref HEAD) | tr '\n' '\\1' | sed -re 's;(\\o1\\o1|\\o2\\o1)([^-+*#\\o1]+);\\1#### \\2;g' | tr '\\1' '\n' | tr -d '\\2'"

  # from <http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs#answer-9074343>
  lg1 = log --graph -15 --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
[merge]
	conflictstyle = diff3
	tool = vimdiff
[pull]
	ff = only
[push]
	default = simple
[rerere]
   enabled = true # from <http://psung.blogspot.com/2011/02/reducing-merge-headaches-git-meets.html>
[remote]
	pushdefault = origin
[branch "master"]
	pushremote = no_push
#[user]
#	email = 
#	name = 
#[url "git@website.com:"]
#	insteadOf = https://website.com/
