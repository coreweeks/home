[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	editor = vim
	excludesfile = ~/.gitconfig.d/gitignore
	attributesfile = ~/.gitconfig.d/gitattributes
[color]
	ui = true
[alias]
  # inspired by <https://www.atlassian.com/blog/git/advanced-git-aliases>
#  bclean = "!git branch --merged HEAD | sed -re 's;^\\*?\\s+;;' | egrep -v \"^($(git rev-parse --abbrev-ref HEAD)|master)$\" -Z | xargs -0 -I{} echo -e 'these branches would be cleared:\n{}'"
   bclean = "!git fet; bash -c '\
               current_branch=$(git current-branch) \
               \
               main_branch=$(git get-main-branch);\
               affected_branches=$(git branch --merged $(git get-main-remote)/$(git get-main-branch) | \
               sed -re \"s;^\\*?\\s+;;\" | \
               egrep -v \"^$main_branch$\" -Z);\
               \
               if [[ $affected_branches ]]; then\
                  echo -e \"these branches would be cleared:\\n$(echo \"${affected_branches}\" | sed -e \"s;^;- ;\")\"; \
                  echo; \
                  echo -n \"would you like to clear them? [y/N] \";\
                  read;\
                  echo;\
                  if [[ $REPLY =~ [Yy] ]]; then \
                     for branch in $affected_branches; do \
                        if [[ $branch = $current_branch ]]; then \
                           echo -n \"delete current branch '\\''\"$current_branch\"'\\''? [Y/N] \" && \
                           read && \
                           echo && \
                           [[ $REPLY =~ Y ]] || continue; \
                        fi; \
                        git branch -d $branch;\
                     done; \
                  else \
                     echo \"cancelling branch clearing\"; \
                  fi;\
               else\
                  echo \"no branches to clean!\";\
               fi;\
            '"
  br = branch
  co = checkout
  ci = "!bash -c '\
           git sync \"'$@'\";\
           \
           if git diff --staged --quiet --exit-code && [[ ! \"'$@'\" =~ (^-a | -a | -a$|^-a$) ]]; then\
              echo -e \"\nnothing in index to commit!\";\
           else\
              echo -e \"\npress ENTER to continue with commit\";\
              read;\
              git commit -v '$@';\
           fi;\
        '"
  changelog = "!git log --format='### %cd%x02%n%B' $(git get-main-branch)..$(git rev-parse --abbrev-ref HEAD) | tr '\n' '\\1' | sed -re 's;(\\o1\\o1|\\o2\\o1)([^-+*#\\o1]+);\\1#### \\2;g' | tr '\\1' '\n' | tr -d '\\2'"
  com = commit -v
  current-branch = symbolic-ref --short HEAD
  df = "!bash -c 'git diff --word-diff-regex=\".\" $(if [[ -e \"$GIT_PREFIX/'$1'\" && ! \"$GIT_PREFIX/'$1'\" =~ ^/$ ]]; then echo \"$GIT_PREFIX/'$1'\"; else echo \"'$1'\"; fi) && echo && git diff --check'"
  dff = "!bash -c 'git diff --word-diff-regex=\"(\\[[^]]+\\]|\\([^)]+\\)|\\w)+\" $(echo \"$GIT_PREFIX\")'$1' && echo && git diff --check'"
  dfs = "!bash -c 'git diff --staged --word-diff-regex=\".\" $(echo \"$GIT_PREFIX\")'$1' && echo && git diff --check'"
  dffs = "!bash -c 'git diff --staged --word-diff-regex=\"[ ]+|[^ ]+\" $(echo \"$GIT_PREFIX\")'$1' && echo && git diff --check'"
  diffs = "!bash -c 'git diff --staged $(echo \"$GIT_PREFIX\")'$1' && echo && git diff --check'"
  diff-with-main = "!bash -c 'git diff $(git get-main-branch)...'"
  dump = cat-file -p
  fet = "fetch --all -p"
  get-main-branch = "!bash -c '\
     sed -rne \"s;.*$(git get-main-remote)/(.*);\\1;p\" .git/refs/remotes/$(git get-main-remote)/HEAD 2>/dev/null || {\
        git remote -v show $(git get-main-remote) | sed -rne \"s;.*HEAD branch: (.*)$;\\1;p\";\
     }'" # try a quick method first, but if that fails, try a slower though potentially more up-to-date method
  trunk = "!git co $(git get-main-branch)"
  root-branch = trunk
  rbr = root-branch
  get-main-remote = config --get remote.pushdefault
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  make = "!make " # run make in the repo root directory with any arguments passed to it
  root-dir = rev-parse --show-toplevel
  st = status
  sync = "!$HOME/.gitconfig.d/git-sync.sh $@"
  type = cat-file -t
  ver = "!bash -c 'version=$0; git tag -am \"version $version\" v$version'"
  who = shortlog -n -s --no-merges # from <https://thoughtbot.com/blog/streamline-your-git-workflow-with-aliases>

  # push current branch to all remotes
  # from <https://stackoverflow.com/questions/5785549/able-to-push-to-all-git-remotes-with-the-one-command/18674313#18674313>
  # and <https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git/6245587#6245587>
  pushall = "!bash -c '\
     main_branch=$(git get-main-branch);\
     branch=$(git current-branch);\
     [[ \"$branch\" =~ \"$main_branch\" ]] &&\
        echo -n \"are you sure you wish to push \"$branch\" to all remotes? [y/N] \" &&\
        read;\
     [[ $REPLY =~ [Yy] || ! \"$branch\" =~ \"$main_branch\" ]] &&\
        parallel --will-cite git push -v --tags {} $(git rev-parse --abbrev-ref HEAD) ::: $(git remote)'"
  pushallf = "!bash -c '\
     branch=$(git current-branch);\
     [[ \"$branch\" =~ \"$main_branch\" ]] &&\
        echo -n \"are you sure you wish to push \"$branch\" to all remotes? [y/N] \" &&\
        read;\
     [[ $REPLY =~ [Yy] || ! \"$branch\" =~ \"$main_branch\" ]] &&\
        git remote | xargs --max-procs=1 -L1 -I{} git push -v --tags {} $(git rev-parse --abbrev-ref HEAD) '$@"

  # from <http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs#answer-9074343>
  lg1 = log --graph -30 --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold yellow)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all
  lg2 = log --graph -30 --abbrev-commit --decorate --simplify-by-decoration --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold yellow)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all
  lg3 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold yellow)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg4 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
[merge]
	conflictstyle = diff3
	tool = vimdiff
[pull]
	ff = only
[push]
	default = simple
[rerere]
   enabled = true # from <http://psung.blogspot.com/2011/02/reducing-merge-headaches-git-meets.html>
[remote]
	pushdefault = origin
[status]
   showUntrackedFiles = all
[branch "master"]
	pushremote = no_push
#[user]
#	email = 
#	name = 
#[url "git@website.com:"]
#	insteadOf = https://website.com/
