#!/bin/bash

##########################################################
######Global Variables#######
#############################

export DOMAIN_REGEX='([a-zA-Z0-9]+[-a-zA-Z0-9@]+\.)+[-a-zA-Z0-9]{2,4}'
export HTTP_REGEX="https?://$DOMAIN_REGEX(:[0-9]+|\/[^ \/;,\)\"\'\`|]+[^\.,: \(\)\"]?)*"
export IP_REGEX='(((2([0-4][0-9]|5[0-5])|1[0-9][0-9]|[1-9][0-9]?|0)\.){3}(2([0-4][0-9]|5[0-5])|1[0-9][0-9]|[1-9][0-9]?|0))'

# from <https://emailregex.com/#crayon-5ca92712ae76e888963988>
# supposed to be the regex used by the "email" HTML5 form element
#EMAIL_REGEX='^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$'

# from <https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression/201378#201378>
# supposed to be better
export EMAIL_REGEX='(?:[a-z0-9!#$%&'\''*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'\''*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])'

# ignore same sucessive entries and delete duplicate lines in history.
export HISTCONTROL="erasedups:ignoreboth"

# include timestamps for all commands
export HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "

# remember many more than the default of 500 history commands
export HISTSIZE=20000
# this must be set really high or not set at all; it seems as of bash version 4.4.19(1)-release, having the history file larger than this size causes a segfault
export HISTFILESIZE=20000

# ensure vim is the default editor of choice
export EDITOR="vim"
export LESS="-QFRX --no-histdups" # '-+i' resets search case sensitivity, which seems to be getting set somehow (formerly, this was '+-+i', as '-+i' alone didn't seem to work; that longer version executes when `less` opens and makes searches case sensitive and (with ) bypasses the message about that)

# set default pager for manpages
export MANPAGER="/bin/sh -c 'fmt -s -w $(($(tput cols) - 6)) - | tail -n+2 | less $(echo $LESS) -N'" # until `less` v571+, we have to reduce the available width that `less` uses so that we can number the man page lines without messing up the formatting (the '$(($(tput cols) - 6))') accounts for `less`'s current default line number column width of 7, though it seems 6 works here just as well
# once we're on `less` version 571+, we can add the `-N -J --line-num-width=4 --status-col-width=2` options to print line numbers and a status column while not affecting formatting/wrapping
# the `--line-num-width` option was added in `less` v571:
# https://github.com/gwsw/less/issues/103
# https://github.com/gwsw/less/commit/65e5afd5f4a0f591e265a0edb75d0556da8761a5
# https://github.com/gwsw/less/commit/13f1a7d9efe3a017a08bf3666a6da87771734d17
# https://github.com/gwsw/less/compare/v569...v570
# https://github.com/gwsw/less/compare/v570...v571

# a further enhancement will be when you can conditionally use line numbers based on file size:
# https://github.com/gwsw/less/issues/230

# needed to ensure windows aren't open if it's not desired
# invoke no windows using a command like `SCREEN_CONF= screen`
# from <https://pbrisbin.com/posts/screen_tricks/>
export SCREEN_CONF="$HOME/.screenrc_main"

##########################################################
