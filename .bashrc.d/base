#!/bin/bash

if ! (grep -q '\[deep\]' /sys/power/mem_sleep); then
   echo deep | sudo tee /sys/power/mem_sleep
fi

if ! (grep -q '\[deep\]' /sys/power/mem_sleep); then
   cat <<-EOF
	deep sleep not currently configured!

	configure deep sleep by adding this line to the kernel command in the grub configuration:
	mem_sleep_default=deep

	you can run this command to set it until the next boot:

	   echo deep | sudo tee /sys/power/mem_sleep

	for convenience, you can also set this in /etc/sudoers to be able to run the above without needing a password:

	   %sudo ALL=NOPASSWD: /usr/bin/tee /sys/power/mem_sleep

	EOF
fi

# output the following messages only on my local computer, not on servers
if [[ -z "$SSH_CLIENT" && -n "$DISPLAY" ]]; then
   # for LFS use (as recommended by <http://www.linuxfromscratch.org/hints/downloads/files/lfs_next_to_existing_systems.txt>
   export LFS=/mnt/lfs
#   echo don\'t forget to execute: sudo mount --bind /media/programs/linux_from_scratch "$LFS"
#   echo

   #remove the right alt hotkey behavior in unity
   [[ -x /usr/bin/xmodmap ]] && /usr/bin/xmodmap -e 'remove mod1 = Alt_R'

   #process the Apple keyboard mod if using an Apple keyboard
   . $HOME/.apple_keyboard_mod.rc
fi

# print out the todo list
if [[ -f ~/.todo && -s ~/.todo ]]; then
   echo
   echo 'things to do:'
   cat ~/.todo
fi

# ensure ~/.bash_history is in append-only mode since there's craziness with it being inappropriately truncated
# the `ls -lO` part is a Mac OS X compatibility crutch
if [[ $MAC_OS_X -eq 0 ]]; then
   [[ $(which lsattr) && $(lsattr $HOME/.bash_history) =~ ^.....a.*$ ]] ||
      cat <<-EOF
		warning: $HOME/.bash_history is not in append-only mode!

		enable that with this command:

		   sudo chattr +a $HOME/.bash_history

		EOF
else
   [[ ! $(ls -lO "$HOME"/.bash_history) =~ uappnd ]] ||
      cat <<-EOF
		warning: $HOME/.bash_history is not in append-only mode!

		enable that with this command:

		   sudo chflags uappend $HOME/.bash_history

		EOF
fi

# inform the user if the ~/.bash_history file is greater than or equal to the $HISTFILESIZE value for rotation
[[ $(wc -l $HOME/.bash_history | cut -d' ' -f1) -ge $HISTFILESIZE ]] && echo "consider making a new $HOME/.bash_history file, as it's >= to $HISTFILESIZE lines"

# enable color support of ls and also add handy aliases
if [[ "$TERM" != "dumb" && "$TERM_PROGRAM" != "Apple_Terminal" && ! "$TERM_PROGRAM" =~ iTerm ]]; then
   eval "`dircolors -b`"
fi

# don't overwrite ~/.bash_history file upon logging out
shopt -s histappend

# start a terminal multiplexer upon login only if screen is not already opened and there are no detached sessions
SHLVL_threshold=1
# always use just "screen" as the terminal so servers don't go ballistic
# ugh, `export TERM=screen` causes weird stuff on the local machine, like italicizing text instead of highlighting it when
# copying using screen's commands
#export TERM=screen
if [[ -x $(which tmux) ]]; then
   TMUX_LIST=$(tmux ls 2>/dev/null)
   if [[
      ! $TERM =~ screen && # we're not currently in a tmux session
                           # (tmux sets $TERM to "screen"
      $(env | sed -n "s;SHLVL=\([0-9][0-9]*\);\1;p") -le $SHLVL_threshold # we're in the main bash instance (not nested)
   ]]; then

     if [[ -n "$TMUX_LIST" && $(echo "$TMUX_LIST" | grep -cvi attached) -ne 0 ]]; then
        # list detached tmux instances, if any, to explain why tmux wasn't started
        cat <<-EOF
			can't start tmux due to these detached sessions:
			$(echo "$TMUX_LIST" | grep -vi attached)
			EOF
     else
        # there are no tmux sessions or at least no detached tmux sessions, so start tmux
        tmux

#        # this command would otherwise result in the following error if in ~/.tmux.conf since tmux seems to read and execute the conf file in full before creating a session:
#        # .tmux.conf:117: no current target
#        # more info at <https://superuser.com/questions/1413870/tmux-conf-doesnt-work-when-starting-but-does-with-source-file/1414127#1414127>
#        tmux new-window top
     fi
   fi
else
   SCREEN_LIST=$(screen -ls)
   [[ ! $TERM =~ screen && $(env | sed -n "s;SHLVL=\([1-9][1-9]*\);\1;p") = $SHLVL_threshold && ! $(echo "$SCREEN_LIST" | grep -i detached) ]] && screen

   # list detached screens, if any, to explain why screen wasn't started
   [[ $(echo "$SCREEN_LIST" | grep -i detached) ]] && echo "$SCREEN_LIST"
fi

# read in latest bash history.  for some reason, this must come last (or at least after the "shopt" line);
# otherwise, the timestamps in ~/.bash_history are also considered commands
#history -n

# don't remember basic/common commands, including all bash aliases
# i really need to make a level 0/level 6 script using perl or something to have greater control over regexes; plus, it can be annoying to have the commands immediately removed; lastly, duplicates aren't always removed like they should be
HISTIGNORE="bg:cd *:crontab -?:df -h:echo:edit-history:fg*:git co master:jobs:kill*:ls:list -tr:ping 8.8.8.8:popd:pushd:pwd:screen -r:screen -t *:vim:vim nodes:w"

# add git aliases
HISTIGNORE+=":$(
   [[ -x $(which git) ]] && {
      for i in $(git config -l | sed -rne 's;^alias\.([^=]+)=.*;\1;p'); do
         # git config --get-regexp alias | sed -rne 's;^alias\.([^ ]+) .*;\1;p'
         value+="git $i:";
      done;
      echo "${value%:}";
   }
)"
# add main aliases
HISTIGNORE+=":$(
   # list aliases to include in HISTIGNORE
   includes=(
   eh
   )
   includes="$(
   for i in ${!includes[*]}; do
      [[ $i -eq 0 ]] && echo -n "(${includes[$i]}" && continue
      echo -n "|${includes[$i]}"
   done
   echo -n ")"
   )"
   trailing_char="*" # ignore all aliases
   alias |
    # list aliases to exclude from HISTIGNORE
    grep -vf <(cat <<-EOF | xargs -I{} echo ^alias {}
		aptinstall
		aptsearch
		aptshow
		cp
		dir
		list
		mtr
		mv
		nmap
		EOF
    ) |
    egrep -o "^alias (([^=]{3,})|$includes)=.*" |
    sed -re "s;^alias $includes=.*;:\1;" |
    sed -re "s;^alias ([^=]{3,})=.*;:\1$trailing_char;" |
    sort |
    tr -d '\n' |
    sed -e 's;^:;;'
)"

export HISTIGNORE
#export HISTIGNORE="bg:cd *:crontab -?:df -h:echo:edit-history:fg*:$([[ -x $(which git) ]] && { for i in $(git config -l | sed -rne 's;^alias\.([^=]+)=.*;\1;p'); do value+="git $i:"; done; echo "${value%:}"; }):git co master:jobs:kill*:ls:list -tr:ping 8.8.8.8:popd:pushd:pwd:screen -r:screen -t *:vim:vim nodes:w:$(alias | sed -rne 's;^alias ([^=]*)=.*;:\1?;p' | sort | tr -d '\n' | sed -e 's;^:;;')"

set -o vi
