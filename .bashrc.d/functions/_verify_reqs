#!/bin/bash

_verify_reqs() {

   # this is a function helper that ensures commands required by the calling
   # function are available to it

   # this function will return an error to the calling function with a list
   # of unavailable commands

   # input: list of commands required for the function to run (spaces are permitted)
   # output: errors for any commands that are not available

   # call this function using one of these two forms:
   #
   # form 1:
   # _verify_reqs $input_value1[:version_string][ $input_value2[:version_string]...] || return 1
   #
   # form 2:
   # _verify_reqs <<-EOF || return 1
   #    $input_value1[:version_string]
   #    [$input_value2[:version_string]...]
   # EOF

   # example:
   #  _verify_reqs <<-EOF || return 1
   #		base64
   #		bzip2
   #		rsync:3.1.2
   #		ssh
   #		verbose
   #	EOF

   if [[ -n "$@" ]]; then
      declare -a requirements=($@)
   elif [[ ! -t 0 ]]; then
      # input isn't a terminal, i.e., use stdin
      # inspired by <https://unix.stackexchange.com/questions/484630/check-if-no-command-line-arguments-and-stdin-is-empty/484643#484643>
      declare -a requirements=($(cat /dev/stdin))
   else
      echo "ERROR: you must supply a list of required files or functions!"

      echo
      echo "file: $(realpath ${BASH_SOURCE[1]})"
      echo "function: ${FUNCNAME[1]}"
      echo "line: ${BASH_LINENO[0]}";
   fi

   declare -a failures

   local req
   for req in ${requirements[*]}; do
      local actual_version
      local needed_version="${req#*:}"
      req="${req%:*}"

      actual_version="$(${req%:*} --version 2>&1 | sed -rne '1s;.* ([0-9.a-z+]+\.[0-9.a-z+]+)([^0-9.a-z+].*|$);\1;p')"
      [[ "$actual_version" ]] || actual_version="$(${req%:*} -v 2>&1 | sed -rne '1s;.* ([0-9.a-z+]+\.[0-9.a-z+]+)([^0-9.a-z+].*|$);\1;p')"
      [[ "$actual_version" ]] || actual_version="$(${req%:*} -V 2>&1 | sed -rne '1s;.* ([0-9.a-z+]+\.[0-9.a-z+]+)([^0-9.a-z+].*|$);\1;p')"

      # if no version was specified, pretend the actual version is what we want
      [[ "$needed_version" == "$req" ]] && needed_version="$actual_version"

      # make sure both the required command, as well as the version, if specified, are what we actually have
      { type -t "$req" &>/dev/null && [[ "$needed_version" == "$actual_version" ]]; } || failures+=("$req")
   done

   if [[ -n ${failures[*]} ]]; then
      echo "ERROR: requirement(s) not met:"
      echo

      local failure
      for failure in ${failures[*]}; do
         echo "* $failure"
      done

      echo
      echo "file: $(realpath ${BASH_SOURCE[1]})"
      echo "function: ${FUNCNAME[1]}"
      echo "line: ${BASH_LINENO[0]}";

      return 1
   else
      return 0
   fi
}
